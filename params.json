{"name":"Heapish","tagline":"Semi-Self-Sorting Heaps of Content","body":"Heapish\r\n=======\r\n\r\nA jQuery Plugin for generating semi-self-sorting heaps of content.\r\n\r\n\r\nWhat does it do?\r\n----------------\r\n\r\nHeapish creates a \"heap\" of content, made up of elements in two formats: boxes,\r\nand rows. It was purpose-built to help manage Dashboard Widgets in an\r\napplication, which contain both full-width items such as graphs and tables\r\n(Rows), and smaller items such as pie charts or small bits of data (Boxes).\r\n\r\nHeapish attempts to organize the Boxes into as few rows as possible, while\r\nrespecting the implied order of the content as much as possible.\r\n\r\nImagine a Container that's 800px wide, containing 4 elements:\r\n- Row 1 contains two boxes, each 200px by 200px.\r\n- Row 2 contains a full-width table\r\n- Row 3 contains another box, also 200px by 200px.\r\n\r\nHanded over to Heapish, the box in the third row would be moved to the end of\r\nthe first row, and the third row would be removed. That may not sound very\r\nimpressive on its own, but when you start handing it dozens of boxes, it's\r\npretty powerful.\r\n\r\nHeapish also evenly spaces those boxes across the Row, and responds to both\r\nwindow.resize events and DOM Mutation events on its parent element, allowing it\r\nto dynamically reposition content responsively.\r\n\r\n\r\n___\r\n\r\n\r\nSettings\r\n--------\r\n\r\nThe default Settings object is as follows:\r\n```javascript\r\n    $.fn.heapish.defaults = {\r\n        uniqueClass: 'heapish',\r\n        defaultFormat: 'box',\r\n        data: [],\r\n\t\tpaddingV: 15,\r\n\t\tpaddingH: 15,\r\n\t\tuseRuler: false,\r\n\t\tallowRemovalWhileEditing: true\r\n    };\r\n```\r\n\r\nThis defaults object can be overwritten before calling heapish, if desired, or\r\nspecific options can be provided when `heapish()` is first called.\r\n\r\n__uniqueClass__: the Class added to the element `heapish()` is called against.\r\n\r\n__defaultFormat__: the format new content should be given when none is\r\nspecified. Should be either 'box' or 'row'.\r\n\r\n__data__: an array of content to be added automatically to the heap. Each object\r\nin the array should have the following form:\r\n\r\n```javascript\r\n{\r\n    content: \"<p>Some HTML here</p>\", // OR\r\n    content: $(\"#some_jquery_object\"),\r\n    format: 'box', // optional, defaults to _defaultFormat_\r\n    data: {foo: 'bar'} // optional, added to the resulting DOM object as data attributes\r\n}\r\n```\r\n\r\n__paddingV__: The amount of vertical space between rows in the heap.\r\n\r\n__paddingH__: The _minimum_ amount of horizontal space between boxes in the\r\nheap.  Actual space is computed at runtime to evenly distribute content, but\r\nwill never drop below this level.\r\n\r\n__useRuler__: if `true`, a hidden ruler object is added to the heap and used to\r\ncalculate width. If you expect your heap to have a vertical scrollbar (container\r\nof a fixed size with overflow: scroll, for example) set this to true. In most\r\ncases, it's not needed.\r\n\r\n__allowRemovalWhileEditing__: by default, when entering Edit Mode each item in\r\nthe heap is displayed with arrows to control its position, and a red X button\r\nto allow the item to be removed.  This prevents that removal button from being\r\nrendered.  IT does __not__ prevent the .remove() method from being called.\r\n\r\n\r\n___\r\n\r\n\r\nFunctions\r\n---------\r\n\r\n### __.heapish(options)__\r\n\r\n__Usage:__ `$('#heap').heapish({useRuler: true});`\r\n\r\nThis initializes Heapish. If the target element already contains content, each\r\nelement is added to the Heap. \r\n\r\n_options_ takes the form of the settings object described above. Alternatively,\r\nany other heapish function can be called by passing its name as the options\r\nargument, ie: `.heapish(\"stop\");`\r\n\r\n\r\n### __.heapish.organize(always)__\r\n\r\n__Usage:__ `$('#heap').heapish.organize();`\r\n\r\nThis manually invokes the organize function. If you've changed the contents of\r\nan item in the heap, you may want to call this.\r\n\r\nIf `true`, _always_ forces `organize()` to fire even if heapish is in a stopped\r\nstate.\r\n\r\n\r\n### __.heapish.push(content, format, beforeIndex, silent)__\r\n\r\n__Usage:__ `$('#heap').heapish.push(\"<div>New Heap Item</div>\", \"box\");`\r\n\r\nThis adds a new item to the Heap.\r\n\r\n_content_ may be an HTML string or jQuery object. It may also be an object of\r\nthe same format accepted by `settings.data`\r\n\r\n_format_, if provided, should be either 'box' or 'row', defaulting to\r\n`settings.defaultFormat` if neither is supplied. If both _content.format_ and\r\n_format_ are supplied, _format_ will be used.\r\n\r\n_beforeIndex_, if provided, will insert the new item into the heap at the given\r\nindex. If omitted or set to -1, the item will be appended to the end of the\r\nheap.\r\n\r\n_silent_, if provided, will prevent `syncHeap()` and `organize()` from being\r\nfired. This can be useful if you intend to add multiple items, as it will\r\ngreatly reduce the number of DOM-modifying events being triggered.\r\n\r\n\r\n### __.heapish.remove(index, silent)__\r\n\r\n__Usage:__ `$('#heap').heapish.remove(5);`\r\n\r\nThis removes an item from the Heap.\r\n\r\n_index_ is the numerical index in the heap of the item to be removed.  If\r\n_index_ is provided as a negative number, the item is removed from the end\r\nof the heap (-1 for the last item, -2 for second last, etc)\r\n\r\n_silent_, if provided, will prevent `syncHeap()` and `organize()` from being\r\nfired. This can be useful if you intend to remove multiple items, as it will\r\ngreatly reduce the number of DOM-modifying events being triggered.\r\n\r\n\r\n### __.heapish.pop(silent)__\r\n\r\n__Usage:__ `$('#heap').heapish.pop();`\r\n\r\nThe removes the last item from the Heap. It's simply a shorthand for\r\n`heapish.remove(-1)`.\r\n\r\n_silent_, if provided, will prevent `syncHeap()` and `organize()` from being\r\nfired. This can be useful if you intend to remove multiple items, as it will\r\ngreatly reduce the number of DOM-modifying events being triggered.\r\n\r\n\r\n### __.heapish.data()__\r\n\r\n__Usage:__ `$('#heap').heapish.data();`\r\n\r\nReturns the array of data representing the current Heap.  If you're planning to\r\npersist the order of elements to a database or something similar, you'll want\r\nto call this function and iterate the response.\r\n\r\n\r\n### __.heapish.stop()__\r\n\r\n__Usage:__ `$.('#heap').heapish.stop();`\r\n\r\nWhile _stopped_, heapish will not fire automatic `organize()` events.\r\n\r\n\r\n### __.heapish.go()__\r\n\r\n__Usage:__ `$.('#heap').heapish.go();`\r\n\r\nClears the _stopped_ state, resuming normal automatic `organize()` events.\r\n\r\n\r\n### __.heapish.showMeta()__\r\n\r\n__Usage:__ `$.('#heap').heapish.showMeta();`\r\n\r\nCreates a Meta-data overlay which displays information about heap items such as\r\nthe computed row and index, dimensions, etc.  Meant as a Developer Debug tool.\r\n\r\nIf called while already in this mode, it ends the previous showMeta session and\r\nbegins a new one.\r\n\r\n\r\n### __.heapish.hideMeta()__\r\n\r\n__Usage:__ `$.('#heap').heapish.hideMeta();`\r\n\r\nEnds the running showMeta session, if one is present. The meta overlay can also\r\nbe dismissed by simply clicking on it.\r\n\r\n\r\n### __.heapish.move(index, heapPosition)__\r\n\r\n__Usage:__ `$.('#heap').heapish.move(5, 2);`\r\n\r\nRelocates an item within the Heap.\r\n\r\n_index_ is the numerical index in the heap of the item to be moved.\r\n\r\n_heapPosition_ is the new position desired within the heap.  If given as -1,\r\nthe item is moved to the back of the heap.\r\n\r\n__NOTE__ that `.move()` has no silent option - `syncHeap()` and `organize()`\r\nare always called as a result of using `.move()`.\r\n\r\n\r\n### __.heapish.syncHeap()__\r\n\r\n__Usage:__ `$.('#heap').heapish.syncHeap();`\r\n\r\nSynchronizes the DOM order with the understood Heap order.  If you ever have to\r\nmanually called `.organize()` consider calling this first as well.\r\n\r\n\r\n### __.heapish.startEditing()__\r\n\r\n__Usage:__ `$.('#heap').heapish.startEditing();`\r\n\r\nEnters the Heapish Edit mode. __Box__ format items are given Left/Right\r\ncontrols, while __Row__ format items are given Up/Down controls.  Assuming\r\n`settings.allowRemovalWhileEditing` is true, all items also receive a Remove\r\ncontrol.\r\n\r\n\r\n### __.heapish.finishEditing()__\r\n\r\n__Usage:__ `$.('#heap').heapish.finishEditing();`\r\n\r\nCloses the Editing overlay and leaves Edit Mode.\r\n\r\n\r\n### __.heapish.states()__\r\n\r\n__Usage:__ `$.('#heap').heapish.states();`\r\n\r\nReturns an object containing information about the various states of the heap;\r\n_ready_, _stopped_, _meta_ and _edit_ (the last two indicating that showMeta or\r\nstartEditing have been called, respectively).\r\n\r\n\r\n___\r\n\r\n\r\nTriggered Events\r\n----------------\r\n\r\n__heapish-initializing:__ Triggered when heapish() is first called.\r\n\r\n__heapish-ready:__ Triggered when heapish() completes setup.\r\n\r\n__heapish-organizing:__ Triggered when heapish.organize() begins.\r\n\r\n__heapish-organized:__ Triggered when heapish.organized() completes.\r\n\r\n__heapish-push:__ Triggered when heapish.push() begins. Supplies the content,\r\nformat, and beforeIndex parameters given to `push()` as arguments.\r\n\r\n__heapish-remove:__ Triggered when heapish.remove() begins. Supplies the heap item\r\nbeing removed as an argument.\r\n\r\n__heapish-stop:__ Triggered when heapish.stop() is called.\r\n\r\n__heapish-go:__ Triggered when heapish.go() is called.\r\n\r\n__heapish-meta-show:__ Triggered when heapish.showMeta() is called.\r\n\r\n__heapish-meta-hide:__ Triggered when heapish.hideMeta() is called.\r\n\r\n__heapish-move:__ Triggered when heapish.move() is called. Supplies heap item\r\nbeing moved, and the new heap position it is being moved to as arguments.\r\n\r\n__heapish-editing:__ Triggered when heapish.startEditing() is called.\r\n\r\n__heapish-editing-refresh:__ Triggered when heapish.startEditing() is called\r\nwhile already in Edit Mode.\r\n\r\n__heapish-edited:__ Triggered when heapish.finishEditing() is called. Supplies\r\nthe heap as an argument.\r\n\r\n\r\n___\r\n\r\n\r\nFAQ\r\n---\r\n\r\nNo one has asked any questions yet!\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}